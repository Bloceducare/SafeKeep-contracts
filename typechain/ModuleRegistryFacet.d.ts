/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ModuleRegistryFacetInterface extends ethers.utils.Interface {
  functions: {
    "addModules(tuple[],string[])": FunctionFragment;
    "getFacetCuts(string)": FunctionFragment;
    "getModule(string)": FunctionFragment;
    "getModules(string[])": FunctionFragment;
    "moduleExists(string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addModules",
    values: [
      {
        facetData: {
          facetAddress: string;
          action: BigNumberish;
          functionSelectors: BytesLike[];
        }[];
        slot: BytesLike;
        timeAdded: BigNumberish;
        facetNames: string[];
      }[],
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFacetCuts",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getModule", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getModules",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "moduleExists",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addModules", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFacetCuts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getModule", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getModules", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moduleExists",
    data: BytesLike
  ): Result;

  events: {};
}

export class ModuleRegistryFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ModuleRegistryFacetInterface;

  functions: {
    addModules(
      _modules: {
        facetData: {
          facetAddress: string;
          action: BigNumberish;
          functionSelectors: BytesLike[];
        }[];
        slot: BytesLike;
        timeAdded: BigNumberish;
        facetNames: string[];
      }[],
      _names: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getFacetCuts(
      _name: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, number, string[]] & {
          facetAddress: string;
          action: number;
          functionSelectors: string[];
        })[]
      ] & {
        cuts_: ([string, number, string[]] & {
          facetAddress: string;
          action: number;
          functionSelectors: string[];
        })[];
      }
    >;

    getModule(
      _name: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          ([string, number, string[]] & {
            facetAddress: string;
            action: number;
            functionSelectors: string[];
          })[],
          string,
          BigNumber,
          string[]
        ] & {
          facetData: ([string, number, string[]] & {
            facetAddress: string;
            action: number;
            functionSelectors: string[];
          })[];
          slot: string;
          timeAdded: BigNumber;
          facetNames: string[];
        }
      ] & {
        module_: [
          ([string, number, string[]] & {
            facetAddress: string;
            action: number;
            functionSelectors: string[];
          })[],
          string,
          BigNumber,
          string[]
        ] & {
          facetData: ([string, number, string[]] & {
            facetAddress: string;
            action: number;
            functionSelectors: string[];
          })[];
          slot: string;
          timeAdded: BigNumber;
          facetNames: string[];
        };
      }
    >;

    getModules(
      _names: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          ([string, number, string[]] & {
            facetAddress: string;
            action: number;
            functionSelectors: string[];
          })[],
          string,
          BigNumber,
          string[]
        ] & {
          facetData: ([string, number, string[]] & {
            facetAddress: string;
            action: number;
            functionSelectors: string[];
          })[];
          slot: string;
          timeAdded: BigNumber;
          facetNames: string[];
        })[]
      ] & {
        modules_: ([
          ([string, number, string[]] & {
            facetAddress: string;
            action: number;
            functionSelectors: string[];
          })[],
          string,
          BigNumber,
          string[]
        ] & {
          facetData: ([string, number, string[]] & {
            facetAddress: string;
            action: number;
            functionSelectors: string[];
          })[];
          slot: string;
          timeAdded: BigNumber;
          facetNames: string[];
        })[];
      }
    >;

    moduleExists(
      _name: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { exists_: boolean }>;
  };

  addModules(
    _modules: {
      facetData: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[];
      slot: BytesLike;
      timeAdded: BigNumberish;
      facetNames: string[];
    }[],
    _names: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getFacetCuts(
    _name: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, number, string[]] & {
      facetAddress: string;
      action: number;
      functionSelectors: string[];
    })[]
  >;

  getModule(
    _name: string,
    overrides?: CallOverrides
  ): Promise<
    [
      ([string, number, string[]] & {
        facetAddress: string;
        action: number;
        functionSelectors: string[];
      })[],
      string,
      BigNumber,
      string[]
    ] & {
      facetData: ([string, number, string[]] & {
        facetAddress: string;
        action: number;
        functionSelectors: string[];
      })[];
      slot: string;
      timeAdded: BigNumber;
      facetNames: string[];
    }
  >;

  getModules(
    _names: string[],
    overrides?: CallOverrides
  ): Promise<
    ([
      ([string, number, string[]] & {
        facetAddress: string;
        action: number;
        functionSelectors: string[];
      })[],
      string,
      BigNumber,
      string[]
    ] & {
      facetData: ([string, number, string[]] & {
        facetAddress: string;
        action: number;
        functionSelectors: string[];
      })[];
      slot: string;
      timeAdded: BigNumber;
      facetNames: string[];
    })[]
  >;

  moduleExists(_name: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    addModules(
      _modules: {
        facetData: {
          facetAddress: string;
          action: BigNumberish;
          functionSelectors: BytesLike[];
        }[];
        slot: BytesLike;
        timeAdded: BigNumberish;
        facetNames: string[];
      }[],
      _names: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getFacetCuts(
      _name: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, number, string[]] & {
        facetAddress: string;
        action: number;
        functionSelectors: string[];
      })[]
    >;

    getModule(
      _name: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, number, string[]] & {
          facetAddress: string;
          action: number;
          functionSelectors: string[];
        })[],
        string,
        BigNumber,
        string[]
      ] & {
        facetData: ([string, number, string[]] & {
          facetAddress: string;
          action: number;
          functionSelectors: string[];
        })[];
        slot: string;
        timeAdded: BigNumber;
        facetNames: string[];
      }
    >;

    getModules(
      _names: string[],
      overrides?: CallOverrides
    ): Promise<
      ([
        ([string, number, string[]] & {
          facetAddress: string;
          action: number;
          functionSelectors: string[];
        })[],
        string,
        BigNumber,
        string[]
      ] & {
        facetData: ([string, number, string[]] & {
          facetAddress: string;
          action: number;
          functionSelectors: string[];
        })[];
        slot: string;
        timeAdded: BigNumber;
        facetNames: string[];
      })[]
    >;

    moduleExists(_name: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    addModules(
      _modules: {
        facetData: {
          facetAddress: string;
          action: BigNumberish;
          functionSelectors: BytesLike[];
        }[];
        slot: BytesLike;
        timeAdded: BigNumberish;
        facetNames: string[];
      }[],
      _names: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getFacetCuts(_name: string, overrides?: CallOverrides): Promise<BigNumber>;

    getModule(_name: string, overrides?: CallOverrides): Promise<BigNumber>;

    getModules(_names: string[], overrides?: CallOverrides): Promise<BigNumber>;

    moduleExists(_name: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addModules(
      _modules: {
        facetData: {
          facetAddress: string;
          action: BigNumberish;
          functionSelectors: BytesLike[];
        }[];
        slot: BytesLike;
        timeAdded: BigNumberish;
        facetNames: string[];
      }[],
      _names: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getFacetCuts(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getModule(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getModules(
      _names: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    moduleExists(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
