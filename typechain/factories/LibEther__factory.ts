/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { LibEther, LibEtherInterface } from "../LibEther";

const _abi = [
  {
    inputs: [],
    name: "AmountMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "EthWithdrawalError",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientEth",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_vaultID",
        type: "uint256",
      },
    ],
    name: "EthDeposited",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_vaultID",
        type: "uint256",
      },
    ],
    name: "EthWithdrawn",
    type: "event",
  },
];

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ae9257d5327e00de1821dbc73dc0afa0696e5a7d02e138452fee9aff97115cf264736f6c63430008040033";

export class LibEther__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LibEther> {
    return super.deploy(overrides || {}) as Promise<LibEther>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LibEther {
    return super.attach(address) as LibEther;
  }
  connect(signer: Signer): LibEther__factory {
    return super.connect(signer) as LibEther__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibEtherInterface {
    return new utils.Interface(_abi) as LibEtherInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibEther {
    return new Contract(address, _abi, signerOrProvider) as LibEther;
  }
}
