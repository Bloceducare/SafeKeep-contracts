/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC721Facet, ERC721FacetInterface } from "../ERC721Facet";

const _abi = [
  {
    inputs: [],
    name: "NotERC721Owner",
    type: "error",
  },
  {
    inputs: [],
    name: "NotVaultOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_approved",
        type: "bool",
      },
    ],
    name: "approveAllERC721Token",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenID",
        type: "uint256",
      },
    ],
    name: "approveSingleERC721Token",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenID",
        type: "uint256",
      },
    ],
    name: "depositERC721Token",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "_tokenIDs",
        type: "uint256[]",
      },
    ],
    name: "depositERC721Tokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenID",
        type: "uint256",
      },
    ],
    name: "safeDepositERC721Token",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenID",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeDepositERC721TokenAndCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenID",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
    ],
    name: "withdrawERC721Token",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610cd6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638154feb31161005b5780638154feb314610103578063902bad541461011657806396a8ef9e14610129578063f2b20dab1461013c57600080fd5b8063150b7a021461008d57806328bedb51146100c85780636c975b8f146100dd5780637a4f8e2d146100f0575b600080fd5b6100ab61009b366004610917565b635c46a7ef60e11b949350505050565b6040516001600160e01b0319909116815260200160405180910390f35b6100db6100d6366004610a73565b61014f565b005b6100db6100eb366004610a73565b61015d565b6100db6100fe366004610889565b610167565b6100db6101113660046108d7565b61017f565b6100db610124366004610ad4565b610192565b6100db610137366004610a9e565b6101a4565b6100db61014a3660046109f0565b6101b7565b6101598282610204565b5050565b61015982826102bd565b61016f6102f6565b61017a838383610300565b505050565b6101876102f6565b61017a838284610369565b61019e8484848461039e565b50505050565b6101ac6102f6565b61017a83838361040a565b60005b8181101561019e576101f2848484848181106101e657634e487b7160e01b600052603260045260246000fd5b90506020020135610204565b806101fc81610c4b565b9150506101ba565b6040516323b872dd60e01b8152336004820152306024820152604481018290526001600160a01b038316906323b872dd906064015b600060405180830381600087803b15801561025357600080fd5b505af1158015610267573d6000803e3d6000fd5b5033925050506001600160a01b0383167f3349b5522bbd89c651e27d290dfa825aae569b7cec38fbbb70eca23412080aff836102a161064d565b6040805192835260208301919091520160405180910390a35050565b604051632142170760e11b8152336004820152306024820152604481018290526001600160a01b038316906342842e0e90606401610239565b6102fe610660565b565b60405163a22cb46560e01b81526001600160a01b038381166004830152821515602483015284169063a22cb465906044015b600060405180830381600087803b15801561034c57600080fd5b505af1158015610360573d6000803e3d6000fd5b50505050505050565b60405163095ea7b360e01b81526001600160a01b0382811660048301526024820184905284169063095ea7b390604401610332565b604051635c46a7ef60e11b81526001600160a01b0385169063b88d4fde906103d29033903090889088908890600401610ba0565b600060405180830381600087803b1580156103ec57600080fd5b505af1158015610400573d6000803e3d6000fd5b5050505050505050565b6040516331a9108f60e11b81526004810183905230906001600160a01b03851690636352211e9060240160206040518083038186803b15801561044c57600080fd5b505afa158015610460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104849190610866565b6001600160a01b0316146104ab5760405163fa10c0e760e01b815260040160405180910390fd5b6104cf60405180604001604052806003815260200162444d5360e81b815250610694565b15610530576104de83836106cd565b156105285760405162461bcd60e51b8152602060048201526016602482015275155b905b1b1bd8d85d1948151bdad95b88119a5c9cdd60521b604482015260640160405180910390fd5b610530610708565b604051632142170760e11b81523060048201526001600160a01b038281166024830152604482018490528416906342842e0e90606401600060405180830381600087803b15801561058057600080fd5b505af1925050508015610591575060015b61017a576060805161060b577f2a5e9fd1df3e89bedde4cc41639c8476fe31415840cbbefcbc154d391f5dbf268484846105c961064d565b6040516105fe94939291906001600160a01b039485168152602081019390935292166040820152606081019190915260800190565b60405180910390a161019e565b6040516001600160a01b03851681527f32e03818635e784323f20f12773b10302cb9da5cefa410045ad2391af90763d79060200160405180910390a150505050565b600061065761075e565b60040154905090565b61066861075e565b600501546001600160a01b031633146102fe57604051630e7fea9d60e01b815260040160405180910390fd5b60008061069f61075e565b905080600601836040516106b39190610b84565b9081526040519081900360200190205460ff169392505050565b6000806106d86107e3565b6001600160a01b039094166000908152600b90940160209081526040808620948652939052505090205460ff1690565b60006107126107e3565b428082559091507f4b956f7dd859946b4769262a4e79184ac10e1bb38db7ac1b1b2e108464248d4d9061074361064d565b6040805192835260208301919091520160405180910390a150565b6000806107bb60405180604001604052600f8152806020016e111a585b5bdb9910dd5d119858d95d608a1b81525060405180604001604052601181528060200170111a585b5bdb99131bdd5c19519858d95d607a1b815250610833565b7f7f9df2342d5c190c7450de83944c941641ce57327a12faebc868644d2853cdbf1892915050565b6000806107bb60405180604001604052600f8152806020016e111a585b5bdb9910dd5d119858d95d608a1b81525060405180604001604052600881528060200167111354d19858d95d60c21b8152505b60008282604051602001610848929190610bf1565b60405160208183030381529060405280519060200120905092915050565b600060208284031215610877578081fd5b815161088281610c88565b9392505050565b60008060006060848603121561089d578182fd5b83356108a881610c88565b925060208401356108b881610c88565b9150604084013580151581146108cc578182fd5b809150509250925092565b6000806000606084860312156108eb578283fd5b83356108f681610c88565b9250602084013561090681610c88565b929592945050506040919091013590565b6000806000806080858703121561092c578081fd5b843561093781610c88565b9350602085013561094781610c88565b925060408501359150606085013567ffffffffffffffff8082111561096a578283fd5b818701915087601f83011261097d578283fd5b81358181111561098f5761098f610c72565b604051601f8201601f19908116603f011681019083821181831017156109b7576109b7610c72565b816040528281528a60208487010111156109cf578586fd5b82602086016020830137918201602001949094529598949750929550505050565b600080600060408486031215610a04578283fd5b8335610a0f81610c88565b9250602084013567ffffffffffffffff80821115610a2b578384fd5b818601915086601f830112610a3e578384fd5b813581811115610a4c578485fd5b8760208260051b8501011115610a60578485fd5b6020830194508093505050509250925092565b60008060408385031215610a85578182fd5b8235610a9081610c88565b946020939093013593505050565b600080600060608486031215610ab2578283fd5b8335610abd81610c88565b92506020840135915060408401356108cc81610c88565b60008060008060608587031215610ae9578384fd5b8435610af481610c88565b935060208501359250604085013567ffffffffffffffff80821115610b17578384fd5b818701915087601f830112610b2a578384fd5b813581811115610b38578485fd5b886020828501011115610b49578485fd5b95989497505060200194505050565b60008151808452610b70816020860160208601610c1f565b601f01601f19169290920160200192915050565b60008251610b96818460208701610c1f565b9190910192915050565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a084013781830160a090810191909152601f909201601f19160101949350505050565b604081526000610c046040830185610b58565b8281036020840152610c168185610b58565b95945050505050565b60005b83811015610c3a578181015183820152602001610c22565b8381111561019e5750506000910152565b6000600019821415610c6b57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610c9d57600080fd5b5056fea2646970667358221220acd3e5290a80a7a924549f151a5c2f35b18fb1ca33405a0a0b725d277ffa02c364736f6c63430008040033";

export class ERC721Facet__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC721Facet> {
    return super.deploy(overrides || {}) as Promise<ERC721Facet>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC721Facet {
    return super.attach(address) as ERC721Facet;
  }
  connect(signer: Signer): ERC721Facet__factory {
    return super.connect(signer) as ERC721Facet__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721FacetInterface {
    return new utils.Interface(_abi) as ERC721FacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721Facet {
    return new Contract(address, _abi, signerOrProvider) as ERC721Facet;
  }
}
