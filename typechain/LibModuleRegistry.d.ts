/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LibModuleRegistryInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "ModuleAdded(string,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ModuleAdded"): EventFragment;
}

export type ModuleAddedEvent = TypedEvent<
  [
    string,
    [
      ([string, number, string[]] & {
        facetAddress: string;
        action: number;
        functionSelectors: string[];
      })[],
      string,
      BigNumber,
      string[]
    ] & {
      facetData: ([string, number, string[]] & {
        facetAddress: string;
        action: number;
        functionSelectors: string[];
      })[];
      slot: string;
      timeAdded: BigNumber;
      facetNames: string[];
    }
  ] & {
    _name: string;
    _module: [
      ([string, number, string[]] & {
        facetAddress: string;
        action: number;
        functionSelectors: string[];
      })[],
      string,
      BigNumber,
      string[]
    ] & {
      facetData: ([string, number, string[]] & {
        facetAddress: string;
        action: number;
        functionSelectors: string[];
      })[];
      slot: string;
      timeAdded: BigNumber;
      facetNames: string[];
    };
  }
>;

export class LibModuleRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LibModuleRegistryInterface;

  functions: {};

  callStatic: {};

  filters: {
    "ModuleAdded(string,tuple)"(
      _name?: string | null,
      _module?: null
    ): TypedEventFilter<
      [
        string,
        [
          ([string, number, string[]] & {
            facetAddress: string;
            action: number;
            functionSelectors: string[];
          })[],
          string,
          BigNumber,
          string[]
        ] & {
          facetData: ([string, number, string[]] & {
            facetAddress: string;
            action: number;
            functionSelectors: string[];
          })[];
          slot: string;
          timeAdded: BigNumber;
          facetNames: string[];
        }
      ],
      {
        _name: string;
        _module: [
          ([string, number, string[]] & {
            facetAddress: string;
            action: number;
            functionSelectors: string[];
          })[],
          string,
          BigNumber,
          string[]
        ] & {
          facetData: ([string, number, string[]] & {
            facetAddress: string;
            action: number;
            functionSelectors: string[];
          })[];
          slot: string;
          timeAdded: BigNumber;
          facetNames: string[];
        };
      }
    >;

    ModuleAdded(
      _name?: string | null,
      _module?: null
    ): TypedEventFilter<
      [
        string,
        [
          ([string, number, string[]] & {
            facetAddress: string;
            action: number;
            functionSelectors: string[];
          })[],
          string,
          BigNumber,
          string[]
        ] & {
          facetData: ([string, number, string[]] & {
            facetAddress: string;
            action: number;
            functionSelectors: string[];
          })[];
          slot: string;
          timeAdded: BigNumber;
          facetNames: string[];
        }
      ],
      {
        _name: string;
        _module: [
          ([string, number, string[]] & {
            facetAddress: string;
            action: number;
            functionSelectors: string[];
          })[],
          string,
          BigNumber,
          string[]
        ] & {
          facetData: ([string, number, string[]] & {
            facetAddress: string;
            action: number;
            functionSelectors: string[];
          })[];
          slot: string;
          timeAdded: BigNumber;
          facetNames: string[];
        };
      }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
