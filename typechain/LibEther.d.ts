/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LibEtherInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "EthDeposited(uint256,address,uint256)": EventFragment;
    "EthWithdrawn(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EthDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthWithdrawn"): EventFragment;
}

export type EthDepositedEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    _amount: BigNumber;
    _from: string;
    _vaultID: BigNumber;
  }
>;

export type EthWithdrawnEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    _amount: BigNumber;
    _to: string;
    _vaultID: BigNumber;
  }
>;

export class LibEther extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LibEtherInterface;

  functions: {};

  callStatic: {};

  filters: {
    "EthDeposited(uint256,address,uint256)"(
      _amount?: null,
      _from?: null,
      _vaultID?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { _amount: BigNumber; _from: string; _vaultID: BigNumber }
    >;

    EthDeposited(
      _amount?: null,
      _from?: null,
      _vaultID?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { _amount: BigNumber; _from: string; _vaultID: BigNumber }
    >;

    "EthWithdrawn(uint256,address,uint256)"(
      _amount?: null,
      _to?: null,
      _vaultID?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { _amount: BigNumber; _to: string; _vaultID: BigNumber }
    >;

    EthWithdrawn(
      _amount?: null,
      _to?: null,
      _vaultID?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { _amount: BigNumber; _to: string; _vaultID: BigNumber }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
