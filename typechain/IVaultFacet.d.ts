/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IVaultFacetInterface extends ethers.utils.Interface {
  functions: {
    "addInheritors(address[],uint256[])": FunctionFragment;
    "allEtherAllocations()": FunctionFragment;
    "transferBackup(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addInheritors",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allEtherAllocations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferBackup",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addInheritors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allEtherAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferBackup",
    data: BytesLike
  ): Result;

  events: {
    "EthDeposited(uint256,uint256)": EventFragment;
    "vaultCreated(address,address,uint256,address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EthDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "vaultCreated"): EventFragment;
}

export type EthDepositedEvent = TypedEvent<
  [BigNumber, BigNumber] & { _amount: BigNumber; _vaultID: BigNumber }
>;

export type vaultCreatedEvent = TypedEvent<
  [string, string, BigNumber, string[]] & {
    owner: string;
    backup: string;
    startingBalance: BigNumber;
    inheritors: string[];
  }
>;

export class IVaultFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IVaultFacetInterface;

  functions: {
    addInheritors(
      _newInheritors: string[],
      _weiShare: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allEtherAllocations(
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { inheritor: string; weiAlloc: BigNumber })[]] & {
        eAllocs: ([string, BigNumber] & {
          inheritor: string;
          weiAlloc: BigNumber;
        })[];
      }
    >;

    transferBackup(
      _newBackupAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addInheritors(
    _newInheritors: string[],
    _weiShare: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allEtherAllocations(
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber] & { inheritor: string; weiAlloc: BigNumber })[]
  >;

  transferBackup(
    _newBackupAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addInheritors(
      _newInheritors: string[],
      _weiShare: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    allEtherAllocations(
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber] & { inheritor: string; weiAlloc: BigNumber })[]
    >;

    transferBackup(
      _newBackupAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EthDeposited(uint256,uint256)"(
      _amount?: null,
      _vaultID?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _amount: BigNumber; _vaultID: BigNumber }
    >;

    EthDeposited(
      _amount?: null,
      _vaultID?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _amount: BigNumber; _vaultID: BigNumber }
    >;

    "vaultCreated(address,address,uint256,address[])"(
      owner?: string | null,
      backup?: string | null,
      startingBalance?: BigNumberish | null,
      inheritors?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string[]],
      {
        owner: string;
        backup: string;
        startingBalance: BigNumber;
        inheritors: string[];
      }
    >;

    vaultCreated(
      owner?: string | null,
      backup?: string | null,
      startingBalance?: BigNumberish | null,
      inheritors?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string[]],
      {
        owner: string;
        backup: string;
        startingBalance: BigNumber;
        inheritors: string[];
      }
    >;
  };

  estimateGas: {
    addInheritors(
      _newInheritors: string[],
      _weiShare: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allEtherAllocations(overrides?: CallOverrides): Promise<BigNumber>;

    transferBackup(
      _newBackupAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addInheritors(
      _newInheritors: string[],
      _weiShare: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allEtherAllocations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferBackup(
      _newBackupAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
