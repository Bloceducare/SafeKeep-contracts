/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LibTokensInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "BatchERC1155TokenDeposit(address,address,uint256[],uint256[],uint256)": EventFragment;
    "ERC1155TokenDeposit(address,address,uint256,uint256,uint256)": EventFragment;
    "ERC1155TokenWithdrawal(address,uint256,uint256,address,uint256)": EventFragment;
    "ERC20ErrorHandled(address)": EventFragment;
    "ERC20TokenDeposit(address,address,uint256,uint256)": EventFragment;
    "ERC20TokenWithdrawal(address,uint256,address,uint256)": EventFragment;
    "ERC721ErrorHandled(address)": EventFragment;
    "ERC721TokenDeposit(address,address,uint256,uint256)": EventFragment;
    "ERC721TokenWIthdrawal(address,uint256,address,uint256)": EventFragment;
    "ErrorHandled(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BatchERC1155TokenDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC1155TokenDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC1155TokenWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20ErrorHandled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20TokenDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20TokenWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721ErrorHandled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721TokenDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721TokenWIthdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ErrorHandled"): EventFragment;
}

export type BatchERC1155TokenDepositEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber[], BigNumber] & {
    token: string;
    from: string;
    tokenIDs: BigNumber[];
    amounts: BigNumber[];
    vaultID: BigNumber;
  }
>;

export type ERC1155TokenDepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber] & {
    token: string;
    from: string;
    tokenID: BigNumber;
    amount: BigNumber;
    vaultID: BigNumber;
  }
>;

export type ERC1155TokenWithdrawalEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber] & {
    token: string;
    tokenID: BigNumber;
    amount: BigNumber;
    to: string;
    vaultID: BigNumber;
  }
>;

export type ERC20ErrorHandledEvent = TypedEvent<[string] & { arg0: string }>;

export type ERC20TokenDepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    token: string;
    from: string;
    amount: BigNumber;
    vaultID: BigNumber;
  }
>;

export type ERC20TokenWithdrawalEvent = TypedEvent<
  [string, BigNumber, string, BigNumber] & {
    token: string;
    amount: BigNumber;
    to: string;
    vaultID: BigNumber;
  }
>;

export type ERC721ErrorHandledEvent = TypedEvent<[string] & { arg0: string }>;

export type ERC721TokenDepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    token: string;
    from: string;
    tokenID: BigNumber;
    vaultID: BigNumber;
  }
>;

export type ERC721TokenWIthdrawalEvent = TypedEvent<
  [string, BigNumber, string, BigNumber] & {
    token: string;
    tokenID: BigNumber;
    to: string;
    vaultID: BigNumber;
  }
>;

export type ErrorHandledEvent = TypedEvent<[string] & { arg0: string }>;

export class LibTokens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LibTokensInterface;

  functions: {};

  callStatic: {};

  filters: {
    "BatchERC1155TokenDeposit(address,address,uint256[],uint256[],uint256)"(
      token?: string | null,
      from?: string | null,
      tokenIDs?: null,
      amounts?: null,
      vaultID?: null
    ): TypedEventFilter<
      [string, string, BigNumber[], BigNumber[], BigNumber],
      {
        token: string;
        from: string;
        tokenIDs: BigNumber[];
        amounts: BigNumber[];
        vaultID: BigNumber;
      }
    >;

    BatchERC1155TokenDeposit(
      token?: string | null,
      from?: string | null,
      tokenIDs?: null,
      amounts?: null,
      vaultID?: null
    ): TypedEventFilter<
      [string, string, BigNumber[], BigNumber[], BigNumber],
      {
        token: string;
        from: string;
        tokenIDs: BigNumber[];
        amounts: BigNumber[];
        vaultID: BigNumber;
      }
    >;

    "ERC1155TokenDeposit(address,address,uint256,uint256,uint256)"(
      token?: string | null,
      from?: string | null,
      tokenID?: null,
      amount?: null,
      vaultID?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        token: string;
        from: string;
        tokenID: BigNumber;
        amount: BigNumber;
        vaultID: BigNumber;
      }
    >;

    ERC1155TokenDeposit(
      token?: string | null,
      from?: string | null,
      tokenID?: null,
      amount?: null,
      vaultID?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        token: string;
        from: string;
        tokenID: BigNumber;
        amount: BigNumber;
        vaultID: BigNumber;
      }
    >;

    "ERC1155TokenWithdrawal(address,uint256,uint256,address,uint256)"(
      token?: null,
      tokenID?: null,
      amount?: null,
      to?: null,
      vaultID?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber],
      {
        token: string;
        tokenID: BigNumber;
        amount: BigNumber;
        to: string;
        vaultID: BigNumber;
      }
    >;

    ERC1155TokenWithdrawal(
      token?: null,
      tokenID?: null,
      amount?: null,
      to?: null,
      vaultID?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber],
      {
        token: string;
        tokenID: BigNumber;
        amount: BigNumber;
        to: string;
        vaultID: BigNumber;
      }
    >;

    "ERC20ErrorHandled(address)"(
      undefined?: null
    ): TypedEventFilter<[string], { arg0: string }>;

    ERC20ErrorHandled(
      undefined?: null
    ): TypedEventFilter<[string], { arg0: string }>;

    "ERC20TokenDeposit(address,address,uint256,uint256)"(
      token?: string | null,
      from?: string | null,
      amount?: null,
      vaultID?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { token: string; from: string; amount: BigNumber; vaultID: BigNumber }
    >;

    ERC20TokenDeposit(
      token?: string | null,
      from?: string | null,
      amount?: null,
      vaultID?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { token: string; from: string; amount: BigNumber; vaultID: BigNumber }
    >;

    "ERC20TokenWithdrawal(address,uint256,address,uint256)"(
      token?: null,
      amount?: null,
      to?: null,
      vaultID?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      { token: string; amount: BigNumber; to: string; vaultID: BigNumber }
    >;

    ERC20TokenWithdrawal(
      token?: null,
      amount?: null,
      to?: null,
      vaultID?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      { token: string; amount: BigNumber; to: string; vaultID: BigNumber }
    >;

    "ERC721ErrorHandled(address)"(
      undefined?: null
    ): TypedEventFilter<[string], { arg0: string }>;

    ERC721ErrorHandled(
      undefined?: null
    ): TypedEventFilter<[string], { arg0: string }>;

    "ERC721TokenDeposit(address,address,uint256,uint256)"(
      token?: string | null,
      from?: string | null,
      tokenID?: null,
      vaultID?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { token: string; from: string; tokenID: BigNumber; vaultID: BigNumber }
    >;

    ERC721TokenDeposit(
      token?: string | null,
      from?: string | null,
      tokenID?: null,
      vaultID?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { token: string; from: string; tokenID: BigNumber; vaultID: BigNumber }
    >;

    "ERC721TokenWIthdrawal(address,uint256,address,uint256)"(
      token?: null,
      tokenID?: null,
      to?: null,
      vaultID?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      { token: string; tokenID: BigNumber; to: string; vaultID: BigNumber }
    >;

    ERC721TokenWIthdrawal(
      token?: null,
      tokenID?: null,
      to?: null,
      vaultID?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      { token: string; tokenID: BigNumber; to: string; vaultID: BigNumber }
    >;

    "ErrorHandled(address)"(
      undefined?: null
    ): TypedEventFilter<[string], { arg0: string }>;

    ErrorHandled(
      undefined?: null
    ): TypedEventFilter<[string], { arg0: string }>;
  };

  estimateGas: {};

  populateTransaction: {};
}
